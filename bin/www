const app = require('../app');
const debug = require('debug')('randomchat-server:server');
const http = require('http');

const port = normalizePort(process.env.PORT || '3001');
app.set('port', port);

const fs = require('fs');
const https = require('https');
const HTTPS_PORT = 4000;

const options = {
  key: fs.readFileSync(__dirname + '/keys/localhost.pem'),
  cert: fs.readFileSync(__dirname + '/keys/localhost.cert')
};
const server = https.createServer(options, app).listen(HTTPS_PORT, function() {
  console.log('Secure server live at https://localhost:%s/', HTTPS_PORT);
});

const io = require('socket.io').listen(server, {
  log: false,
  origins: '*:*',
  pingInterval: 3000,
  pingTimeout: 5000
});
const handleSocket = require('../config/socket');

handleSocket(io);

// server.listen(port);
server.on('error', onError);
server.on('listening', onListening);

function normalizePort(val) {
  const port = parseInt(val, 10);

  if (isNaN(port)) {
    return val;
  }

  if (port >= 0) {
    return port;
  }

  return false;
}

function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  const bind = typeof port === 'string'
    ? `Pipe ${port}`
    : `Port ${port}`;

  switch (error.code) {
    case 'EACCES':
      console.error(`${bind} requires elevated privileges`);
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(`${bind} is already in use`);
      process.exit(1);
      break;
    default:
      throw error;
  }
}

function onListening() {
  const addr = server.address();
  const bind = typeof addr === 'string'
    ? `pipe ${addr}`
    : `port ${addr.port}`;
  debug(`Listening on ${bind}`);
}
